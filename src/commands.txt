Format:

sudo mkfs -t ext4 /dev/xvdf
sudo chown `whoami` datavol/

------------------------------------------------------
Clone Repo
git config --global user.name "Ishu Garg"
git config --global user.email "ishugarg567@gmail.com"
git clone --recursive https://github.com/ash567/guess_what.git
---------------------------------------
Screen commands
Find the screen id: ctl + a + w
kill: ctl + A + K
detach: ctl + A + d
List Screen: screen -ls
log the screen: ctl + A + H, screen -L
reattach: screen -r id
create: ctl + A + c
switch: ctl + A + n (next), ctl + A + p (previous) 
---------------------------------------
cd guesswhat

Making directories

mkdir data; mkdir data/img ; mkdir data/img/raw ; mkdir data/img/ft_vgg_img ; mkdir data/img/ft_vgg_crop
mkdir out; mkdir out/oracle ; mkdir out/guesser; mkdir out/qgen; mkdir out/looper;


Downloading data

COCO Images
wget http://msvocds.blob.core.windows.net/coco2014/train2014.zip -P data/img/ ; unzip data/img/train2014.zip -d data/img/raw

wget http://msvocds.blob.core.windows.net/coco2014/val2014.zip -P data/img/ ; unzip data/img/val2014.zip -d data/img/raw

wget http://msvocds.blob.core.windows.net/coco2014/test2014.zip -P data/img/ ; unzip data/img/test2014.zip -d data/img/raw

Guess_What Dataset

wget https://s3-us-west-2.amazonaws.com/guess-what/guesswhat.train.jsonl.gz -P data/
wget https://s3-us-west-2.amazonaws.com/guess-what/guesswhat.valid.jsonl.gz -P data/
wget https://s3-us-west-2.amazonaws.com/guess-what/guesswhat.test.jsonl.gz -P data/

# creates a folder `raw` with filenames as expected by preprocessing script below

python src/guesswhat/preprocess_data/rewire_coco_image_id.py -image_dir /home/ubuntu/datavol/guess_what/data/img/raw -data_out /home/ubuntu/datavol/guess_what/data/img/raw

Create Dictionary

python src/guesswhat/preprocess_data/create_dictionary.py -data_dir data -dict_file dict.json -min_occ 3
--------------------------------------------
Activate tensorflow:

source activate tensorflow_p27

To install
**********

pip install --upgrade pip
    tensorflow-gpu==1.5\

pip install --upgrade \
    Cython \
    nltk \
    tqdm \
    image \
    multiprocess



-------------------------------------
Before running code print

export PYTHONPATH=src:${PYTHONPATH} 
-------------------------------------
Creating VGG Features


array=( img crop )
for mode in "${array[@]}"; do
   python src/guesswhat/preprocess_data/extract_img_features.py \
     -img_dir data/img/raw \
     -data_dir data \
     -out_dir data/img/ft_vgg_$mode \
     -network vgg \
     -ckpt data/vgg_16.ckpt \
     -feature_name fc8 \
     -mode $mode \
     -gpu_ratio 0.0 \
     -batch_size 4 \
     -no_thread 4
done


---------------------------------------
Building COCO API

-----------------------------------
Connect:
ssh -i "guess_what.pem" ubuntu@ec2-54-172-173-141.compute-1.amazonaws.com

Mount:
mkdir datavol
sudo mount /dev/xvdf datavol/
sudo umount datavol/

cd datavol

---------------------------
training qgen_guesser

python src/guesswhat/train/train_qgen_guesser_supervised.py \
   -data_dir data \
   -img_dir data/img/raw \
   -config config/qgen_guesser/config.json \
   -exp_dir out/qgen_guesser \
   -no_thread 2 \
   -continue_exp False \

   -gpu_ratio 0.0


python src/guesswhat/train/train_qgen_supervised.py \
   -data_dir data \
   -img_dir data/ft_vgg_img \
   -config config/qgen/config.json \
   -exp_dir out/qgen \
   -no_thread 2 

Checking SSH Keys
---------------------------------------------------
ls -al ~/.ssh


Generating SSH Keys
-------------------------------------------------------
ssh-keygen -t rsa -b 4096 -C "ishugarg567@gmail.com"
eval "$(ssh-agent -s)"
ssh-add ~/.ssh/id_rsa


Copyting the github project
---------------------------

git init
git add *
git commit -m "First commit"
Repo: https://github.com/ash567/guess_what.git
git remote add origin https://github.com/ash567/guess_what.git
git remote -v
git push origin master


Commands:

To clone the repo:
******************
git clone --recursive https://github.com/GuessWhatGame/guesswhat.git


To Unzip
********
unzip data/img/test2014.zip -d data/img/raw


Making coco api


------------------------------

Remember to have init python file in each directory so as to import the module
Also define the python paths to be src


0
down vote
You cannot pickle instance methods using the multiprocessing package in python. Instance methods aren't listed in the pickling documentation.

If you don't mind using an external library, you can look at multiprocess, which is a drop-in replacement for python's multiprocessing. To make use of the library, you would do the following:

pip install multiprocess
replacefrom multiprocessing import Pool, TimeoutError, cpu_count with
from multiprocess import Pool, TimeoutError, cpu_count
I have tested your example on my machine and it actually executes using multiprocess.
-------------------------

terminate called after throwing an instance of 'std::bad_alloc'
  what():  std::bad_alloc
Aborted (core dumped)


It was due to large batch size. Memory issues.
-------------------------------------
creating dictionary
python src/guesswhat/preprocess_data/create_dictionary.py -data_dir data -dict_file dict.json -min_occ 3

----------------------------------------------
training questioner

python src/guesswhat/train/train_qgen_supervised.py \
   -data_dir data \
   -img_dir data/img/raw \
   -config config/qgen/config.json \
   -exp_dir out/qgen \
   -no_thread 2 \
   -continue_exp False \
   -gpu_ratio 0.0

    parser.add_argument("-img_dir", type=str, help='Directory with images')
    parser.add_argument("-load_checkpoint", type=str, help="Load model parameters from specified checkpoint")
    parser.add_argument("-continue_exp", type=bool, default=False, help="Continue previously started experiment?")

training guesser


  parser.add_argument("-data_dir", type=str, help="Directory with data")
    parser.add_argument("-exp_dir", type=str, help="Directory in which experiments are stored")
    parser.add_argument("-img_dir", type=str, help='Directory with images')
    parser.add_argument("-config", type=str, help="Configuration file")
    parser.add_argument("-dict_file", type=str, default="dict.json", help="Dictionary file name")
    parser.add_argument("-load_checkpoint", type=str, help="Load model parameters from specified checkpoint")
    parser.add_argument("-continue_exp", lambda x: bool(strtobool(x)), default="False", help="Continue previously started experiment?")
    parser.add_argument("-gpu_ratio", type=float, default=1., help="How many GPU ram is required? (ratio)")
    parser.add_argument("-no_thread", type=int, default=1, help="No thread to load batch")


---------------------------
train guesser

python src/guesswhat/train/train_guesser.py \
   -data_dir data \
   -img_dir data/img/raw \
   -config config/guesser/config.json \
   -exp_dir out/guesser \
   -no_thread 2 \
   -continue_exp False \
   -gpu_ratio 0.0
---------------------------------------

git too large file 

https://stackoverflow.com/questions/20002557/how-to-remove-a-too-large-file-in-a-commit-when-my-branch-is-ahead-of-master-by
---------------------------------------------------